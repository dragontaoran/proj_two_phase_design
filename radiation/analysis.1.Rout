
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 251954 13.5     460000 24.6   350000 18.7
Vcells 441708  3.4    1023718  7.9   786407  6.0
> 
> # library(devtools)
> # install_github("dragontaoran/TwoPhaseReg", force=TRUE)
> # library(TwoPhaseReg)
> library(TwoPhaseReg, lib.loc="/nas02/home/t/a/taor/Rcode/v11_Rlibs")
> library(survival)
> 
> fn_full = "tb.cohort.txt"
> fn_cc = "tb.cascoh.txt"
> fn_ncc = "tb.ncc.txt"
> fn_scc = "tb.saRxcc.txt"
> N_SIEVE = 3
> 
> fi_full = read.table(fn_full, header=TRUE, as.is=TRUE)
> head(fi_full)
  id tyr  dose nof bc age.rx age.out age.in
1  1  45 0.000   0  0  13.34   47.39  14.59
2  2  47 0.000   0  0  13.88   52.64  14.21
3  3  32 0.000   0  0  16.48   69.76  17.48
4  4  51 0.000   0  0  12.00   46.28  14.00
5  5  39 0.000   0  0  15.54   61.74  16.46
6  6  42 0.066   4  0  15.39   58.55  15.97
> table(fi_full$bc)

   0    1 
1645   75 
> 
> fi_full$age.rx_10 = fi_full$age.rx/10
> fi_full$logdose = log2(fi_full$dose+1)
> # fi_full$age.rx_cut = cut(fi_full$age.rx, quantile(fi_full$age.rx, probs=seq(0, 1, 1/N_SIEVE)), include.lowest = TRUE)
> # table(fi_full$age.rx_cut, useNA="ifany")
> # for (i in 1:N_SIEVE) {
> #     colid = paste("bs", i, sep="")
> #     fi_full[,colid] = as.numeric(fi_full$age.rx_cut == names(table(fi_full$age.rx_cut))[i])
> # }
> fi_full$age.rx.s = NA
> fi_full$age.rx.s[which(fi_full$age.rx < 19)] = 1
> fi_full$age.rx.s[which(fi_full$age.rx >= 19 & fi_full$age.rx < 29)] = 2
> fi_full$age.rx.s[which(fi_full$age.rx >= 29)] = 3
> table(fi_full$age.rx.s, fi_full$bc)
   
      0   1
  1 621  33
  2 609  28
  3 415  14
> for (i in 1:3) {
+     colid = paste("bs", i, sep="")
+     fi_full[,colid] = as.numeric(fi_full$age.rx.s == i)
+ }
> 
> #### full cohort
> res_full = summary(coxph(Surv(age.in, age.out, bc)~logdose+age.rx_10, data=fi_full, robust=TRUE))
> 
> 
> #### case-cohort
> fi_cc = read.table(fn_cc, header=TRUE, as.is=TRUE)
> head(fi_cc)
  rownum id tyr   dose nof bc       l2d   age.rx  age.out   age.in subcoh
1      7  7  35 1.2492 108  0 1.1694120 12.16701 62.28611 13.00205      1
2      9  9  35 0.0000   0  1 0.0000000 15.19781 42.53525 17.28405      0
3     20 21  38 1.1509 117  0 1.1049405 16.65435 24.09035 17.82067      1
4     21 22  35 0.6171  39  1 0.6934089 14.92402 25.42916 17.17728      1
5     27 29  35 0.5943  36  1 0.6729231 15.63860 48.47365 17.72485      0
6     28 31  35 0.0000   0  1 0.0000000 10.99247 36.57495 12.49281      0
  incc.TRUE.1.
1            1
2            1
3            1
4            1
5            1
6            1
> table(fi_cc$bc)

  0   1 
143  75 
> dat1 = fi_full
> dat1$logdose[which(!(dat1$id %in% fi_cc$id))] = NA
> sum(!is.na(dat1$logdose))
[1] 218
> table(dat1$age.rx.s[which(!is.na(dat1$logdose))], dat1$bc[which(!is.na(dat1$logdose))])
   
     0  1
  1 58 33
  2 56 28
  3 29 14
> res_cc = smle(Y="age.out", L="age.in", Delta="bc", X="logdose", Z="age.rx_10", Bspline_Z=paste("bs", 1:3, sep=""), data=dat1, model="coxph")
> 
> #### stratified case-cohort
> fi_scc = read.table(fn_scc, header=TRUE, as.is=TRUE)
> head(fi_scc)
  rownum id tyr   dose nof bc       l2d   age.rx  age.out   age.in subcoh incc
1      9  9  35 0.0000   0  1 0.0000000 15.19781 42.53525 17.28405      0    1
2     21 22  35 0.6171  39  1 0.6934089 14.92402 25.42916 17.17728      0    1
3     27 29  35 0.5943  36  1 0.6729231 15.63860 48.47365 17.72485      0    1
4     28 31  35 0.0000   0  1 0.0000000 10.99247 36.57495 12.49281      0    1
5     31 34  36 0.0000   0  1 0.0000000 13.93840 55.43874 14.93771      0    1
6     40 43  35 2.4267 147  1 1.7768199 11.75907 36.17796 13.50856      0    1
> table(fi_scc$bc)

  0   1 
144  75 
> dat1 = fi_full
> dat1$logdose[which(!(dat1$id %in% fi_scc$id))] = NA
> sum(!is.na(dat1$logdose))
[1] 219
> table(dat1$age.rx.s[which(!is.na(dat1$logdose))], dat1$bc[which(!is.na(dat1$logdose))])
   
     0  1
  1 44 33
  2 50 28
  3 50 14
> res_scc = smle(Y="age.out", L="age.in", Delta="bc", X="logdose", Z="age.rx_10", Bspline_Z=paste("bs", 1:3, sep=""), data=dat1, model="coxph")
> 
> #### optimal sampling
> martingale_residual = coxph(Surv(age.in, age.out, bc)~age.rx_10, data=fi_full)$residuals
> for (stratum in 1:3)
+ {
+     id = which(fi_full$age.rx.s == stratum)
+     martingale_residual[id] = martingale_residual[id]*sd(fi_full$logdose[id])
+ }
> 
> id1 = which(fi_full$age.rx.s == 1)
> ns1 = length(id1)
> order_resi1 = order(martingale_residual[id1])
> id2 = which(fi_full$age.rx.s == 2)
> ns2 = length(id2)
> order_resi2 = order(martingale_residual[id2])
> id3 = which(fi_full$age.rx.s == 3)
> ns3 = length(id3)
> order_resi3 = order(martingale_residual[id3])
> 
> n2 = 109
> best_k1 = 10
> best_k2 = 10
> best_k3 = n2-best_k1-best_k2
> phase2_tmp = c(id1[order_resi1[1:best_k1]], id1[order_resi1[(ns1-best_k1+1):ns1]],
+                id2[order_resi2[1:best_k2]], id2[order_resi2[(ns2-best_k2+1):ns2]],
+                id3[order_resi3[1:best_k3]], id3[order_resi3[(ns3-best_k3):ns3]])
> mart.opt = martingale_residual[phase2_tmp]
> strata.opt = fi_full$age.rx.s[phase2_tmp]
> best_var = var(mart.opt[which(strata.opt == 1)])*sum(strata.opt == 1)+var(mart.opt[which(strata.opt == 2)])*sum(strata.opt == 2)+var(mart.opt[which(strata.opt == 3)])*sum(strata.opt == 3)
> for (k1 in 11:89) {
+     for (k2 in 11:(n2-k1-10)) {
+         k3= n2-k1-k2
+         phase2_tmp = c(id1[order_resi1[1:k1]], id1[order_resi1[(ns1-k1+1):ns1]],
+                        id2[order_resi2[1:k2]], id2[order_resi2[(ns2-k2+1):ns2]],
+                        id3[order_resi3[1:k3]], id3[order_resi3[(ns3-k3):ns3]])
+         mart.opt = martingale_residual[phase2_tmp]
+         strata.opt = fi_full$age.rx.s[phase2_tmp]
+         tmp_var = var(mart.opt[which(strata.opt == 1)])*sum(strata.opt == 1)+var(mart.opt[which(strata.opt == 2)])*sum(strata.opt == 2)+var(mart.opt[which(strata.opt == 3)])*sum(strata.opt == 3)
+         if (tmp_var > best_var) {
+             best_k1 = k1
+             best_k2 = k2
+             best_k3 = k3
+             best_var = tmp_var
+         }
+     }
+ }
> phase2_opt = c(id1[order_resi1[1:best_k1]], id1[order_resi1[(ns1-best_k1+1):ns1]],
+                id2[order_resi2[1:best_k2]], id2[order_resi2[(ns2-best_k2+1):ns2]],
+                id3[order_resi3[1:best_k3]], id3[order_resi3[(ns3-best_k3):ns3]])
> dat1 = fi_full
> dat1$logdose[-phase2_opt] = NA
> sum(!is.na(dat1$logdose))
[1] 219
> table(dat1$age.rx.s[which(!is.na(dat1$logdose))], dat1$bc[which(!is.na(dat1$logdose))])
   
     0  1
  1 65 33
  2 58 28
  3 21 14
> res_opt = smle(Y="age.out", L="age.in", Delta="bc", X="logdose", Z="age.rx_10", Bspline_Z=paste("bs", 1:3, sep=""), data=dat1, model="coxph")
> 
> res_full$coefficients
                coef exp(coef)  se(coef) robust se         z    Pr(>|z|)
logdose    0.4685635 1.5976974 0.1608179 0.1532579  3.057354 0.002233006
age.rx_10 -0.2416333 0.7853441 0.1489708 0.1441066 -1.676767 0.093587968
> res_cc$coefficients
            Estimate        SE Statistic     p-value
logdose    0.5398148 0.2078971  2.596549 0.009416556
age.rx_10 -0.2433425 0.1481973 -1.642017 0.100586496
> res_scc$coefficients
            Estimate        SE Statistic    p-value
logdose    0.6777007 0.2261133  2.997173 0.00272496
age.rx_10 -0.2181758 0.1488430 -1.465812 0.14269960
> res_opt$coefficients
            Estimate        SE Statistic      p-value
logdose    0.9162709 0.2183156  4.197001 2.704727e-05
age.rx_10 -0.2250015 0.1510960 -1.489129 1.364533e-01
> 
> proc.time()
   user  system elapsed 
678.892   0.087 680.244 
